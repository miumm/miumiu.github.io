<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小站</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://myorgmm.github.io/"/>
  <updated>2017-06-16T12:14:11.880Z</updated>
  <id>http://myorgmm.github.io/</id>
  
  <author>
    <name>Minoy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>旋转字符串</title>
    <link href="http://myorgmm.github.io/2017/06/16/%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://myorgmm.github.io/2017/06/16/旋转字符串/</id>
    <published>2017-06-16T12:09:13.000Z</published>
    <updated>2017-06-16T12:14:11.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个字符串，要求把字符串前面的若干个字符移动到字符串的尾部，如把字符串“abcdef”前面的2个字符’a’和’b’移动到字符串的尾部，使得原字符串变成字符串“cdefab”。请写一个函数完成此功能，要求对长度为n的字符串操作的时间复杂度为 O(n)，空间复杂度为 O(1)。</p>
<h2 id="分析和解法："><a href="#分析和解法：" class="headerlink" title="分析和解法："></a>分析和解法：</h2><h3 id="解法一：暴力位移法"><a href="#解法一：暴力位移法" class="headerlink" title="解法一：暴力位移法"></a>解法一：暴力位移法</h3><p>首先，我看到题目的第一个想法就是可以通过暴力一位一位的挪移来实现题目要求。<br><strong>源代码如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"> </div><div class="line">void LeftShiftOne(char* s, int n)    //完成当前字符串的第一个字符到尾部 </div><div class="line">&#123;</div><div class="line">	char t = s[0];   //保存当前字符串的第一个字符 </div><div class="line">	for (int i = 1; i &lt; n; i++)</div><div class="line">	&#123;</div><div class="line">		s[i - 1] = s[i];</div><div class="line">	&#125;</div><div class="line">	s[n - 1] = t;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	char str[100];</div><div class="line">	int m; </div><div class="line">	cin.getline(str,100);  //用于输入一行字符串，普通cin最多输入“ abcd”</div><div class="line">	cin&gt;&gt;m;</div><div class="line">	while(m--)</div><div class="line">	&#123;</div><div class="line">		LeftShiftOne(str, strlen(str));</div><div class="line">	&#125;</div><div class="line">	cout&lt;&lt;str&lt;&lt;endl;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>分析：</strong>针对长度为n的字符串来说，假设需要移动m个字符到字符串的尾部，那么总共需要 m<em>n 次操作，同时设立一个变量保存第一个字符，如此，时间复杂度为O(m </em> n)，空间复杂度为O(1)，空间复杂度符合题目要求，但时间复杂度不符合，所以，得需要寻找其他更好的办法来降低时间复杂度。</p>
<h3 id="解法二：三步反转法"><a href="#解法二：三步反转法" class="headerlink" title="解法二：三步反转法"></a>解法二：三步反转法</h3><p>（这个方法是我从书上学到的，我一开始也没想到。。。）<br>将一个字符串分成X和Y两个部分，在每部分字符串上定义反转操作，如X^T，即把X的所有字符反转（如，X=”abc”，那么X^T=”cba”），那么就得到下面的结论：(X^TY^T)^T=YX，显然就解决了字符串的反转问题。</p>
<p>例如，字符串 abcdef ，若要让def翻转到abc的前头，只要按照下述3个步骤操作即可：</p>
<ul>
<li>首先将原字符串分为两个部分，即X:abc，Y:def；</li>
<li>将X反转，X-&gt;X^T，即得：abc-&gt;cba；将Y反转，Y-&gt;Y^T，即得：def-&gt;fed。</li>
<li>反转上述步骤得到的结果字符串X^TY^T，即反转字符串cbafed的两部分（cba和fed）给予反转，cbafed得到defabc，形式化表示为(X^TY^T)^T=YX，这就实现了整个反转。<br><strong>源代码如下：</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"> </div><div class="line">void MyReverse(char* s, int from, int to)   //自身反转 </div><div class="line">&#123;</div><div class="line">	while(from &lt; to)</div><div class="line">	&#123;</div><div class="line">		char t = s[from];</div><div class="line">		s[from++] = s[to];</div><div class="line">		s[to--] = t;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	char str[100];</div><div class="line">	int n,m;</div><div class="line">	cin.getline(str, 100);</div><div class="line">	cin&gt;&gt;m;</div><div class="line">	n = strlen(str);</div><div class="line">	MyReverse(str, 0, m-1);</div><div class="line">	MyReverse(str, m, n-1);</div><div class="line">	MyReverse(str, 0, n-1);</div><div class="line">	cout&lt;&lt;str&lt;&lt;endl;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>分析：</strong>这就是把字符串分为两个部分，先各自反转再整体反转的方法，时间复杂度为O(n)，空间复杂度为O(1)，达到了题目的要求。</p>
<h2 id="特别注意："><a href="#特别注意：" class="headerlink" title="特别注意："></a>特别注意：</h2><ul>
<li><string.h>是旧的C 头文件，对应的是基于char*的字符串处理函数，并无类，所以不能 string s1 </string.h></li>
<li><cstring>是对应于旧C 头文件的std 版本，实际上只是在一个命名空间std中include了 <string.h></string.h></cstring></li>
<li><string>是包装了std 的C++头文件，对应的是新的string 类，string s1就是建立一个string类的对象 </string></li>
<li>汉字之所以乱码， 是因为汉字是多字节的， 如果采用单字节翻转，必然就乱码了。你需要判断汉字是几个字节（N）， 然后整体翻转移动这N个字节</li>
<li>这里我还想说明一下关于C++输入输出流的问题，有兴趣的可以看一下<a href="http://www.cnblogs.com/chinazhangjie/archive/2010/08/19/1803057.html" target="_blank" rel="external">C/C++输入输出流总结</a></li>
</ul>
<p><strong>参考资料：《编程之法》The Art of Programming By July</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h2&gt;&lt;p&gt;给定一个字符串，要求把字符串前面的若干个字符移动到字符串的尾部，如把字符串“abcdef”前面的2个字符’a’和’b
    
    </summary>
    
      <category term="字符串" scheme="http://myorgmm.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="字符串" scheme="http://myorgmm.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="C++" scheme="http://myorgmm.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://myorgmm.github.io/2017/06/16/hello-world/"/>
    <id>http://myorgmm.github.io/2017/06/16/hello-world/</id>
    <published>2017-06-16T08:19:19.792Z</published>
    <updated>2017-06-16T08:19:19.792Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
